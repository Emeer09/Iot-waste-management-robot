#include <Arduino_ConnectionHandler.h>
#include <WiFiConnectionHandler.h>
#include <ArduinoIoTCloud.h>
#include "thingProperties.h"
#include <CheapStepper.h> // Library for controlling stepper motors
#include <Servo.h>        // Library for controlling servo motors

// Motor Control Pins
int leftf1 = 2;
int leftf2 = 3;
int rightf1 = 4;
int rightf2 = 5;

bool motorState;

// Waste Monitoring Sensor Pins
const int IR_SENSOR_RECYCLABLE = 10;      // IR sensor for detecting recyclable waste (digital pin)
const int IR_SENSOR_NON_RECYCLABLE = A2;  // IR sensor for detecting non-recyclable waste (analog pin)
const int ANALOG_THRESHOLD = 500;         // Threshold for detecting waste using an analog sensor

// Stepper and Servo Motor Setup
Servo servo1;               // Servo motor object
#define IR_SENSOR 11        // IR sensor for waste classification
#define PROXI_SENSOR 12     // Proximity sensor for detecting waste presence
CheapStepper stepper(9, 8, 7, 6); // Stepper motor with 4 control wires

void setup() {
  // Initialize serial communication
  Serial.begin(9600);
  delay(1500);

  // Initialize IoT Cloud properties
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Debugging setup
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Configure motor control pins
  pinMode(leftf1, OUTPUT);
  pinMode(leftf2, OUTPUT);
  pinMode(rightf1, OUTPUT);
  pinMode(rightf2, OUTPUT);
  pinMode(A4, OUTPUT);
  pinMode(A5, OUTPUT);
  stopMovement(); // Ensure motors are stopped initially

  // Configure waste sensor input pins
  pinMode(IR_SENSOR_RECYCLABLE, INPUT);
  pinMode(IR_SENSOR_NON_RECYCLABLE, INPUT);
  pinMode(PROXI_SENSOR, INPUT);
  pinMode(IR_SENSOR, INPUT);

  // Initialize stepper and servo motor
  servo1.attach(13);
  stepper.setRpm(17);

  // Set initial servo position
  servo1.write(70);
  delay(1000);
  servo1.write(180);
  delay(1000);
}

void loop() {
  // Set motor speed (PWM output)
  analogWrite(A4, 100);
  analogWrite(A5, 100);

  // Update IoT Cloud properties
  ArduinoCloud.update();

  // Waste bin monitoring
  int recyclableStatus = digitalRead(IR_SENSOR_RECYCLABLE);
  int nonRecyclableStatus = analogRead(IR_SENSOR_NON_RECYCLABLE);

  // Check and update recyclable bin status
  if (recyclableStatus == HIGH && !isRecyclableFull) {
    isRecyclableFull = true;
    Serial.println("Recyclable bin is full.");
  } else if (recyclableStatus == LOW && isRecyclableFull) {
    isRecyclableFull = false;
    Serial.println("Recyclable bin is not full.");
  }

  // Check and update non-recyclable bin status
  if (nonRecyclableStatus > ANALOG_THRESHOLD && !isNonRecyclableFull) {
    isNonRecyclableFull = true;
    Serial.println("Non-recyclable bin is full.");
  } else if (nonRecyclableStatus <= ANALOG_THRESHOLD && isNonRecyclableFull) {
    isNonRecyclableFull = false;
    Serial.println("Non-recyclable bin is not full.");
  }

  // Waste classification logic
  int irState = digitalRead(IR_SENSOR);
  int proxiState = digitalRead(PROXI_SENSOR);

  Serial.print("Waste Presence: ");
  Serial.println(proxiState || !irState);

  if (proxiState == HIGH) {
    classifyRecyclableWaste();
  } else if (irState == LOW) {
    classifyNonRecyclableWaste();
  }

  delay(500); // Small delay for stability
}

// Classify and sort recyclable waste
void classifyRecyclableWaste() {
  Serial.println("Recyclable waste detected.");
  stepper.moveDegreesCCW(90); // Rotate stepper counterclockwise by 90°
  delay(1000);
  servo1.write(70);           // Move servo to 70°
  delay(2000);
  servo1.write(180);          // Move servo back to 180°
  delay(1000);
  stepper.moveDegreesCW(90);  // Rotate stepper clockwise by 90°
  delay(1000);
}

// Classify and sort non-recyclable waste
void classifyNonRecyclableWaste() {
  Serial.println("Non-recyclable waste detected.");
  stepper.moveDegreesCW(90);  // Rotate stepper clockwise by 90°
  delay(1000);
  servo1.write(70);           // Move servo to 70°
  delay(2000);
  servo1.write(180);          // Move servo back to 180°
  delay(1000);
  stepper.moveDegreesCCW(90); // Rotate stepper counterclockwise by 90°
  delay(1000);
}

// Motor movement functions
void forward() {
  digitalWrite(leftf1, LOW);
  digitalWrite(leftf2, HIGH);
  digitalWrite(rightf1, HIGH);
  digitalWrite(rightf2, LOW);
  Serial.println("Moving Forward");
}

void moveLeft() {
  digitalWrite(leftf1, HIGH);
  digitalWrite(leftf2, LOW);
  digitalWrite(rightf1, HIGH);
  digitalWrite(rightf2, LOW);
  Serial.println("Turning Left");
}

void moveRight() {
  digitalWrite(leftf1, LOW);
  digitalWrite(leftf2, HIGH);
  digitalWrite(rightf1, LOW);
  digitalWrite(rightf2, HIGH);
  Serial.println("Turning Right");
}

void stopMovement() {
  digitalWrite(leftf1, LOW);
  digitalWrite(leftf2, LOW);
  digitalWrite(rightf1, LOW);
  digitalWrite(rightf2, LOW);
  Serial.println("Motors Stopped");
}

// IoT Property Handlers
void onMotorStateChange() {
  if (motorState) {
    forward();
  } else {
    stopMovement();
  }
}

void onIsRecyclableFullChange() {
  Serial.println(isRecyclableFull ? "Recyclable bin status updated: Full" : "Recyclable bin status updated: Not Full");
}

void onIsNonRecyclableFullChange() {
  Serial.println(isNonRecyclableFull ? "Non-recyclable bin status updated: Full" : "Non-recyclable bin status updated: Not Full");
}

void onLeftChange() {
  if (Left) {
    moveLeft();
  } else {
    stopMovement();
  }
}

void onRightChange() {
  if (Right) {
    moveRight();
  } else {
    stopMovement();
  }
}

void onForwardChange() {
  if (Forward) {
    forward();
  } else {
    stopMovement();
  }
}

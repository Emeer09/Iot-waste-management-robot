#include <Arduino_ConnectionHandler.h>
#include <WiFiConnectionHandler.h>
#include <ArduinoIoTCloud.h>

/* 
  Sketch generated by the Arduino IoT Cloud Thing
  https://create.arduino.cc/cloud/things/

  Arduino IoT Cloud Variables description
  bool isNonRecyclableFull;
  bool isRecyclableFull;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
*/

#include "thingProperties.h"

// Pin definitions
const int IR_SENSOR_RECYCLABLE = 10;       // IR sensor for recyclable bin (digital pin)
const int IR_SENSOR_NON_RECYCLABLE = A2;  // IR sensor for non-recyclable bin (analog pin)

// Threshold for analog sensor (adjust based on your sensor's behavior)
const int ANALOG_THRESHOLD = 500;

void setup() {
  // Initialize serial communication
  Serial.begin(9600);
  delay(1500);

  // Initialize IoT Cloud properties
  initProperties();

  // Configure sensor pins
  pinMode(IR_SENSOR_RECYCLABLE, INPUT); // Digital pin for recyclable bin
  // No need to set pinMode for analog pin (A2), as it's automatically configured for analogRead()

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Debug information
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  // Update Arduino IoT Cloud
  ArduinoCloud.update();

  // Read digital sensor for recyclable bin
  int recyclableStatus = digitalRead(IR_SENSOR_RECYCLABLE);

  // Read analog sensor for non-recyclable bin
  int nonRecyclableStatus = analogRead(IR_SENSOR_NON_RECYCLABLE);

  // Update recyclable waste level
  if (recyclableStatus == HIGH && !isRecyclableFull) {
    isRecyclableFull = true;
    Serial.println("Recyclable bin is full.");
  } else if (recyclableStatus == LOW && isRecyclableFull) {
    isRecyclableFull = false;
    Serial.println("Recyclable bin is not full.");
  }

  // Update non-recyclable waste level based on analog value
  if (nonRecyclableStatus > ANALOG_THRESHOLD && !isNonRecyclableFull) {
    isNonRecyclableFull = true;
    Serial.println("Non-recyclable bin is full.");
  } else if (nonRecyclableStatus <= ANALOG_THRESHOLD && isNonRecyclableFull) {
    isNonRecyclableFull = false;
    Serial.println("Non-recyclable bin is not full.");
  }

  // Delay for stability
  delay(500);
}

/*
  Called when isRecyclableFull changes from the IoT Cloud Dashboard
*/
void onIsRecyclableFullChange() {
  if (isRecyclableFull) {
    Serial.println("Recyclable bin status updated: Full");
  } else {
    Serial.println("Recyclable bin status updated: Not Full");
  }
}

/*
  Called when isNonRecyclableFull changes from the IoT Cloud Dashboard
*/
void onIsNonRecyclableFullChange() {
  if (isNonRecyclableFull) {
    Serial.println("Non-recyclable bin status updated: Full");
  } else {
    Serial.println("Non-recyclable bin status updated: Not Full");
  }
}

/*
  Since Right is READ_WRITE variable, onRightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRightChange()  {
  // Add your code here to act upon Right change
}
/*
  Since Forward is READ_WRITE variable, onForwardChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onForwardChange()  {
  // Add your code here to act upon Forward change
}
/*
  Since Left is READ_WRITE variable, onLeftChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLeftChange()  {
  // Add your code here to act upon Left change
}